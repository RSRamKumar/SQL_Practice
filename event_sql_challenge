This table containing sales revenue per quarter and product category. 
```
| SalesID | Year | SalesAmount | ProductCategory |
|---------|------|-------------|-----------------|
| 1       | 2022 | 1000        | Electronics     |
| 2       | 2022 | 1500        | Electronics     |
| 3       | 2022 | 2000        | Electronics     |
| 4       | 2022 | 2500        | Electronics     |
| 5       | 2023 | 1100        | Electronics     |
| 6       | 2023 | 1600        | Electronics     |
| 7       | 2023 | 2100        | Electronics     |
| 8       | 2023 | 2600        | Electronics     |
| 9       | 2024 | 1200        | Electronics     |
| 10      | 2024 | 1700        | Electronics     |
| 11      | 2022 | 800         | Furniture       |
| 12      | 2022 | 1300        | Furniture       |
| 13      | 2022 | 1800        | Furniture       |
| 14      | 2022 | 2300        | Furniture       |
| 15      | 2023 | 900         | Furniture       |
| 16      | 2023 | 1400        | Furniture       |
| 17      | 2023 | 1900        | Furniture       |
| 18      | 2023 | 2400        | Furniture       |
| 19      | 2024 | 1000        | Furniture       |
| 20      | 2024 | 1500        | Furniture       |
```

# Task
Write a SQL query that creates a pivot table showing the total sales for each quarter per year, segmented by ProductCategory. 
Additionally, include a grand total row and a grand total column.

Solution:

1. I wanted to add a new column called `quarter` that indicates the quarter against the year in the dataset which are useful in the downstream process.

```
SELECT *, ROW_NUMBER() over (PARTITION BY Year, ProductCategory ORDER BY YEAR) as Quarter
FROM Sales;

| SalesID | Year | SalesAmount | ProductCategory |Quarter  |
|---------|------|-------------|-----------------|---------|
| 1       | 2022 | 1000        | Electronics     |1        |
| 2       | 2022 | 1500        | Electronics     |2        |
| 3       | 2022 | 2000        | Electronics     |3        |
| 4       | 2022 | 2500        | Electronics     |4        |
| 5       | 2023 | 1100        | Electronics     |1        |
| 6       | 2023 | 1600        | Electronics     |2        |
| 7       | 2023 | 2100        | Electronics     |3        |
| 8       | 2023 | 2600        | Electronics     |4        |
| 9       | 2024 | 1200        | Electronics     |1        |
| 10      | 2024 | 1700        | Electronics     |2        |
| 11      | 2022 | 800         | Furniture       |1        | 
| 12      | 2022 | 1300        | Furniture       |2        |
| 13      | 2022 | 1800        | Furniture       |3        |
```

2. With reference to the Quarter column, the total sales for each quarter per year can be determined using the query. 


```
with CTE AS 
(
SELECT *, ROW_NUMBER() over (PARTITION BY Year, ProductCategory ORDER BY YEAR) as Quarter
FROM Sales )

SELECT 
    COALESCE(ProductCategory, 'Total') AS ProductCategory,
    SUM(CASE WHEN quarter = 1 AND Year = 2022 THEN SalesAmount ELSE 0 END) AS Q1_2022,
    SUM(CASE WHEN quarter = 2 AND Year = 2022 THEN SalesAmount ELSE 0 END) AS Q2_2022,
    SUM(CASE WHEN quarter = 3 AND Year = 2022 THEN SalesAmount ELSE 0 END) AS Q3_2022,
    SUM(CASE WHEN quarter = 4 AND Year = 2022 THEN SalesAmount ELSE 0 END) AS Q4_2022,
    SUM(CASE WHEN quarter = 1 AND Year = 2023 THEN SalesAmount ELSE 0 END) AS Q1_2023,
    SUM(CASE WHEN quarter = 2 AND Year = 2023 THEN SalesAmount ELSE 0 END) AS Q2_2023,
    SUM(CASE WHEN quarter = 3 AND Year = 2023 THEN SalesAmount ELSE 0 END) AS Q3_2023,
    SUM(CASE WHEN quarter = 4 AND Year = 2023 THEN SalesAmount ELSE 0 END) AS Q4_2023,
    SUM(CASE WHEN quarter = 1 AND Year = 2024 THEN SalesAmount ELSE 0 END) AS Q1_2024,
    SUM(CASE WHEN quarter = 2 AND Year = 2024 THEN SalesAmount ELSE 0 END) AS Q2_2024,
    SUM(SalesAmount) AS Total
FROM 
    CTE
GROUP BY 
    ROLLUP(ProductCategory);

```
3. To determine the grand total, I used external reference https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-rollup/ and Chatgpt to know about the rollup function.

